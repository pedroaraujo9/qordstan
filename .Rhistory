#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 0, max = 1)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 2))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
#cutpoints
gamma = c(-Inf, 0, rgamma(k-2, 100, 100), Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(k = 5, seed = 3)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
data$gamma
rgamma(1000, 100, 100) %>% hist()
rgamma(1000, 300, 300) %>% hist()
rgamma(1000, 400, 400) %>% hist()
rgamma(1000, 10, 10) %>% hist()
rgamma(1000, 30, 30) %>% hist()
rgamma(1000, 600, 600) %>% hist()
rgamma(1000, 600, 600) %>% sd()
rgamma(1000, 60, 60) %>% sd()
rgamma(1000, 3, 3) %>% sd()
rgamma(1000, 3, 3) %>% hist()
rgamma(1000, 6, 6) %>% hist()
#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 0, max = 1)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 2))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
#cutpoints
gamma = c(-Inf, 0, rgamma(k-2, 6, 6), Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(k = 5, seed = 3)
data$gamma
data$y %>% table()
data = gen_data_example(n=3000, k = 5, seed = 3)
data$gamma
data$y %>% table()
data$y %>% table() %>% prop.table()
hist(resp)
data$gamma
quantile(resp)
quantile(resp, probs = c(0.25, 0.5, 0.75))
?seq
k = 5
cuts = k - 2
cuts
1/cuts
mean(resp <= 0)
baseline = mean(resp <= 0)
nom_baseline = 1-mean(resp <= 0)
nom_baseline
nom_baseline/k(-1)
nom_baseline/(k-1)
prob = nom_baseline/(k-1)
c(1-nom_baseline)
c(1-nom_baseline, (1-nom_baseline) + prob)
c(1-nom_baseline, (1-nom_baseline) + prob, (1-nom_baseline) + 2*prob)
c(1-nom_baseline, (1-nom_baseline) + prob,
(1-nom_baseline) + 2*prob, (1-nom_baseline) + 3*prob)
c(1-nom_baseline, (1-nom_baseline) + prob,
(1-nom_baseline) + 2*prob, (1-nom_baseline) + 3*prob, (1-nom_baseline) + 4*prob)
resp
resp %>% quantile(c(1-nom_baseline, (1-nom_baseline) + prob,
(1-nom_baseline) + 2*prob, (1-nom_baseline) + 3*prob))
(1-nom_baseline) + prob*0:(k-2)
#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 0, max = 1)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 2))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
freq_base = mean(z <= 0)
freq_nom_base = (1-freq_base)/(k-1)
qfreq_nom_base = (freq_base) + freq_nom_base*1:(k-2)
qgamma = quantile(z, qfreq_nom_base)
#cutpoints
gamma = c(-Inf, 0, qgamma, Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(n=3000, k = 5, seed = 3)
data$gamma
data$y %>% table() %>% prop.table()
data = gen_data_example(n=3000, k = 3, seed = 3)
data$gamma
data$y %>% table() %>% prop.table()
data = gen_data_example(n=3000, k = 3, seed = 1)
data$gamma
data$y %>% table() %>% prop.table()
data = gen_data_example(n=3000, k = 6, seed = 1)
data$gamma
data$y %>% table() %>% prop.table()
devtools::document()
devtools::check()
devtools::document()
devtools::install()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
library(qordstan)
data = gen_data_example(n=3000, k = 6, seed = 1)
devtools::install()
library(qordstan)
qordstan::`.__T__[:base`
?qordstan::`.__T__[:base`
data = gen_data_example(n=3000, k = 6, seed = 1)
data
data = gen_data_example(n=3000, k = 6, seed = 1)
fit = qord_fit(data$x, data$y, q = 0.5)
fit
a = summary(fit)
a$summary_table
class(summary(fit))
summary(fit)
data$b
data$gamma
data = gen_data_example(n=3000, k = 6, seed = 1, p = 6)
data$y %>% table()
library(magrittr)
data$y %>% table()
fit = qord_fit(data$x, data$y, q = 0.5)
fit
a = summary(fit)
a$summary_table
a
class(summary(fit))
summary(fit)
data$b
data$gamma
roxygen2::roxygenize()
devtools::check()
.Last.error.trace
roxygen2::roxygenize()
devtools::build()
devtools::check(".")
.Last.error.trace
kgbuild::compile_dll()
pkgbuild::compile_dll()
devtools:::document()
dir.create("/home/username/tmp/")
dir.create("/home/pedro/tmp/")
Sys.setenv(TMPDIR="/home/pedro/tmp/")
devtools::document()
devtools::check()
install.packages('ggplot2')
install.packages("ggplot2")
devtools::check()
install.packages('roxygen2')
install.packages("roxygen2")
roxygen2::roxygenize()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::build()
install.packages('devtools')
install.packages("devtools")
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library(magrittr)
library(qordstan)
data = gen_data_example(n=3000, k = 6, seed = 1, p = 6)
data$y %>% table()
fit = qord_fit(data$x, data$y, q = 0.5)
fit
a = summary(fit)
a$summary_table
a
class(summary(fit))
data$b
data$gamma
use_github_actions_badge(name = "R-CMD-check")
usethiss::use_github_actions_badge(name = "R-CMD-check")
usethis::use_github_actions_badge(name = "R-CMD-check")
usethis::use_testthat()
usethis::use_test("gen_data_example")
usethis::use_coverage(type = c("codecov"))
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a",)
library(covr)
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a",)
devtools::check()
covr::code_coverage()
covr::package_coverage()
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
devtools::check()
library(testthat)
devtools::test()
devtools::test()
data$gamma
class(Inf)
devtools::test()
data$y %>% unique()
data$gamma
devtools::test()
class(data$x)
data$gamma %>% class()
devtools::test()
expect_is(data$x, 'matrix')
devtools::test()
data$gamma[1]
data$gamma[1] %>% is.infinite()
data$gamma[7] %>% is.infinite()
devtools::test()
n_1 = 3000
n_2 = 1000
k_1 = 6
k_2 = 3
p_1 = 5
p_2 = 4
data_one = gen_data_example(n=n_1, k = k_1, p = p_1)
data_two = gen_data_example(n=n_2, k = k_2, p = p_2)
data_one$x %>% dim()
c(n_1, k_1)
devtools::test()
?expect_type
devtools::test()
devtools::test()
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
code_coverage()
package_coverage()
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
install.packages('bqror')
data = gen_data_example(n=3000, k = 6, seed = 1, p = 6)
library(bqror)
?quantreg_or1
set.seed(101)
data("data25j4")
x <- data25j4$x
y <- data25j4$y
y
y %>% unique()
k <- dim(x)[2]
J <- dim(as.array(unique(y)))[1]
J
D0 <- 0.25*diag(J - 2)
output <- quantreg_or1(y = y,x = x, B0 = 10*diag(k), D0 = D0,
mcmc = 50, p = 0.25, tune = 1)
output <- quantreg_or1(y = y,x = x, B0 = 10*diag(k), D0 = D0,
mcmc = 100, p = 0.25, tune = 1)
output <- quantreg_or1(y = y,x = x, B0 = 10*diag(k), D0 = D0,
mcmc = 10000, p = 0.25, tune = 1)
output <- quantreg_or1(y = y,x = x, B0 = 10*diag(k), D0 = D0,
mcmc = 100, p = 0.25, tune = 1)
?quantreg_or1
output$postMeanbeta
library(qordstan)
fit = qord_fit(x = x, y = y)
fit = qord_fit(x = x, y = y, q = 0.25)
fit = qord_fit(x = x, y = as.numeric(y), q = 0.25)
output
output <- quantreg_or1(y = y,x = x, B0 = 10*diag(k), D0 = D0,
mcmc = 100, p = 0.25, tune = 1)
output
output %>% summary()
output$postMeanbeta
summary(fit)
data = gen_data_example(n=3000, k = 6, seed = 1, p = 6)
x <- data$x
y <- data$y
k <- dim(x)[2]
J <- length(unique(as.numeric(y)))
D0 <- 0.25*diag(J - 2)
output <- quantreg_or1(y = y,x = x, B0 = 10*diag(k), D0 = D0,
mcmc = 100, p = 0.25, tune = 1)
output$postMeanbeta
data$b
output <- quantreg_or1(y = y,x = x, B0 = 10*diag(k), D0 = D0,
mcmc = 100, p = 0.5, tune = 1)
output$postMeanbeta
data$b
fit = qord_fit(x = x, y = as.numeric(y), q = 0.5)
summary(fit)
data$b
output$postMeanbeta
mean(abse(data$b - output$postMeanbeta))
mean(abs(data$b - output$postMeanbeta))
sm = summary(fit)
sm$summary_table
mean(abs(data$b - summary(fit)['mean'][1:6]))
mean(abs(data$b - sm$summary_table[1:6]))
mean(abs(data$b - output$postMeanbeta))
mean(abs(data$b - sm$summary_table[1:6]))
B0
10*diag(k)
D0
fit = qord_fit(x = x, y = as.numeric(y), q = 0.5, beta_scale = 10, delta_scale = 0.25)
sm$summary_table
mean(abs(data$b - output$postMeanbeta))
mean(abs(data$b - sm$summary_table[1:6]))
output <- quantreg_or1(y = y,x = x, B0 = 10*diag(k), D0 = D0,
mcmc = 1000, p = 0.5, tune = 1)
output$postMeanbeta
data$b
mean(abs(data$b - output$postMeanbeta))
mean(abs(data$b - sm$summary_table[1:6]))
output$postStdbeta
sm$summary_table
sm$summary_table['std'][1:6]
sm$summary_table['std']
sm$summary_table
sm$summary_table %>% class()
sm$summary_table[, 'std']
sm$summary_table[, 'std'][1:6]
output$postStdbeta
output$postStdbeta > sm$summary_table[, 'std'][1:6]
mean(output$postStdbeta > sm$summary_table[, 'std'][1:6])
output$beta
output$beta %>% dim()
output$beta[,1] %>% acf()
fit$posterior_sample$beta[,1] %>% acf()
output$beta[,1] %>% acf()
fit$posterior_sample$beta[,1] %>% acf()
output$beta[,1] %>% acf()
output$beta[,1] %>% acf(lag.max = 20)
output$beta[,1] %>% length()
output$beta
output$beta %>% dim()
output$beta[1,]
output$beta[1,] %>% acf()
fit$posterior_sample$beta[,1] %>% acf()
output$beta[1,] %>% acf()
loo::example_loglik_array(fit$stan_fit)
loo::extract_log_lik(fit$stan_fit)
log_lik = loo::extract_log_lik(fit$stan_fit)
loo::waic(log_lik)
rstan::get_logposterior(fit$stan_fit)
rstan::get_logposterior(fit$stan_fit) %>% mean()
x = rstan::get_logposterior(fit$stan_fit)
x %>% class()
x[[1]]
x[[2]]
x[[1]]
x %>% unlist()
x %>% unlist() %>% mean()
output
output$logMargLikelihood
x %>% unlist() %>% mean()
rm(list = ls())
devtools::document()
devtools::test()
devtools::check()
devtools::test()
devtools::check()
usethis::use_test("summary.qordstan")
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
covr::codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
rm(list = ls())
devtools::document()
library(magrittr)
library(tidyverse)
library(qordstan)
library(rstan)
library(covr)
library(bqror)
fit = qord_fit(y ~ X1 + X2, q = 0.1, delta_scale = 2,
data = data$example_df, iter = 100)
data = gen_data_example(n=3000, k = 3, seed = 1, p = 6, q = 0.5)
fit = qord_fit(y ~ X1 + X2, q = 0.1, delta_scale = 2,
data = data$example_df, iter = 100)
summary(fit)
sm = summary(fit)
sm$summary_table
devtools::load_all()
data = gen_data_example(n=3000, k = 3, seed = 1, p = 6, q = 0.5)
fit = qord_fit(y ~ X1 + X2, q = 0.1, delta_scale = 2,
data = data$example_df, iter = 100)
sm = summary(fit)
sm$summary_table
devtools::load_all()
sm = summary(fit)
sm$summary_table
sm
sm$waic
sm$waic %>% class()
devtools::document()
devtools::test()
devtools::test()
usethis::use_test("print.qordstan")
fit
print(fit)
usethis::use_test("print.summary.qordstan")
devtools::document()
devtools::test()
devtools::document()
devtools::test()
devtools::check()
devtools::document()
devtools::test()
devtools::test()
devtools::check()
