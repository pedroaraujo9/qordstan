#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 1, max = 5)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 2))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
#cutpoints
gamma = c(-Inf, 0, rgamma(k-2, 300, 100), Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(k = 3)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 1, max = 5)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 1))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
#cutpoints
gamma = c(-Inf, 0, rgamma(k-2, 300, 100), Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 0, max = 1)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 1))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
#cutpoints
gamma = c(-Inf, 0, rgamma(k-2, 300, 100), Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(k = 3)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
data = gen_data_example(k = 5)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
data = gen_data_example(k = 5)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 0, max = 1)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 2))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
#cutpoints
gamma = c(-Inf, 0, rgamma(k-2, 300, 100), Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(k = 5)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
data = gen_data_example(k = 3)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
data = gen_data_example(k = 3)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
data = gen_data_example(k = 3, seed = 3)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
data = gen_data_example(k = 5, seed = 3)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 0, max = 1)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 2))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
#cutpoints
gamma = c(-Inf, 0, rgamma(k-2, 100, 100), Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(k = 5, seed = 3)
data$y %>% table()
resp = data$x%*%data$b
hist(resp)
data$gamma
rgamma(1000, 100, 100) %>% hist()
rgamma(1000, 300, 300) %>% hist()
rgamma(1000, 400, 400) %>% hist()
rgamma(1000, 10, 10) %>% hist()
rgamma(1000, 30, 30) %>% hist()
rgamma(1000, 600, 600) %>% hist()
rgamma(1000, 600, 600) %>% sd()
rgamma(1000, 60, 60) %>% sd()
rgamma(1000, 3, 3) %>% sd()
rgamma(1000, 3, 3) %>% hist()
rgamma(1000, 6, 6) %>% hist()
#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 0, max = 1)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 2))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
#cutpoints
gamma = c(-Inf, 0, rgamma(k-2, 6, 6), Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(k = 5, seed = 3)
data$gamma
data$y %>% table()
data = gen_data_example(n=3000, k = 5, seed = 3)
data$gamma
data$y %>% table()
data$y %>% table() %>% prop.table()
hist(resp)
data$gamma
quantile(resp)
quantile(resp, probs = c(0.25, 0.5, 0.75))
?seq
k = 5
cuts = k - 2
cuts
1/cuts
mean(resp <= 0)
baseline = mean(resp <= 0)
nom_baseline = 1-mean(resp <= 0)
nom_baseline
nom_baseline/k(-1)
nom_baseline/(k-1)
prob = nom_baseline/(k-1)
c(1-nom_baseline)
c(1-nom_baseline, (1-nom_baseline) + prob)
c(1-nom_baseline, (1-nom_baseline) + prob, (1-nom_baseline) + 2*prob)
c(1-nom_baseline, (1-nom_baseline) + prob,
(1-nom_baseline) + 2*prob, (1-nom_baseline) + 3*prob)
c(1-nom_baseline, (1-nom_baseline) + prob,
(1-nom_baseline) + 2*prob, (1-nom_baseline) + 3*prob, (1-nom_baseline) + 4*prob)
resp
resp %>% quantile(c(1-nom_baseline, (1-nom_baseline) + prob,
(1-nom_baseline) + 2*prob, (1-nom_baseline) + 3*prob))
(1-nom_baseline) + prob*0:(k-2)
#' Generate random data to test estimation procedure
#'
#' Generate random from a specific quantile to fit the model and check if
#' estimation procedure is working properly
#'
#' @aliases gen_data_example
#'
#' @param n number of observations
#' @param k number of categories
#' @param q quantile
#' @param p number of covariates
#' @param seed random seed
#'
#' @return list containing x (covariates), y (response), b (real coefs),
#' delta's and gamma's
#' @details
#' x ~ runif
#' beta ~ normal
#' gamma ~ rgamma
#'
#' @export
#' @import magrittr
#' @importFrom stats rexp rnorm runif sd
#' @examples
#' data = gen_data_example()
#'
gen_data_example = function(n = 1000, k = 5, q = 0.5, p = 3, seed = 20) {
set.seed(seed)
#covariáveis
x = replicate(n = p, expr = {runif(n, min = 0, max = 1)})
#coefs
b = cbind(rnorm(n=p, mean = 1, sd = 2))
#parameters transform
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
#auxiliary variables
w = rexp(n)
u = rnorm(n)
#latent variable
z = as.numeric(x%*%b) + theta*w + tau*sqrt(w)*u
freq_base = mean(z <= 0)
freq_nom_base = (1-freq_base)/(k-1)
qfreq_nom_base = (freq_base) + freq_nom_base*1:(k-2)
qgamma = quantile(z, qfreq_nom_base)
#cutpoints
gamma = c(-Inf, 0, qgamma, Inf) %>% sort()
#generating response variable
y = cut(z, gamma, labels = 1:k) %>%
as.character() %>%
as.numeric()
deltas = log(gamma[-c(1, length(gamma))] %>% diff())
return(list(x=x, y=y, b=b, deltas=deltas, gamma=gamma))
}
data = gen_data_example(n=3000, k = 5, seed = 3)
data$gamma
data$y %>% table() %>% prop.table()
data = gen_data_example(n=3000, k = 3, seed = 3)
data$gamma
data$y %>% table() %>% prop.table()
data = gen_data_example(n=3000, k = 3, seed = 1)
data$gamma
data$y %>% table() %>% prop.table()
data = gen_data_example(n=3000, k = 6, seed = 1)
data$gamma
data$y %>% table() %>% prop.table()
devtools::document()
devtools::check()
devtools::document()
devtools::install()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
library(qordstan)
data = gen_data_example(n=3000, k = 6, seed = 1)
devtools::install()
library(qordstan)
qordstan::`.__T__[:base`
?qordstan::`.__T__[:base`
data = gen_data_example(n=3000, k = 6, seed = 1)
data
data = gen_data_example(n=3000, k = 6, seed = 1)
fit = qord_fit(data$x, data$y, q = 0.5)
fit
a = summary(fit)
a$summary_table
class(summary(fit))
summary(fit)
data$b
data$gamma
data = gen_data_example(n=3000, k = 6, seed = 1, p = 6)
data$y %>% table()
library(magrittr)
data$y %>% table()
fit = qord_fit(data$x, data$y, q = 0.5)
fit
a = summary(fit)
a$summary_table
a
class(summary(fit))
summary(fit)
data$b
data$gamma
roxygen2::roxygenize()
devtools::check()
.Last.error.trace
roxygen2::roxygenize()
devtools::build()
devtools::check(".")
.Last.error.trace
kgbuild::compile_dll()
pkgbuild::compile_dll()
devtools:::document()
dir.create("/home/username/tmp/")
dir.create("/home/pedro/tmp/")
Sys.setenv(TMPDIR="/home/pedro/tmp/")
devtools::document()
devtools::check()
install.packages('ggplot2')
install.packages("ggplot2")
devtools::check()
install.packages('roxygen2')
install.packages("roxygen2")
roxygen2::roxygenize()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::build()
install.packages('devtools')
install.packages("devtools")
devtools::document()
