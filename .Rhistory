rstan::sampling
?rstan::sampling
library(qordstan)
data = gen_data_example()
fit = qord_fit(data$x, data$y, p = 0.5)
fit
data$b
data$deltas
data$gammas
plot(fit)
data$deltas
data$gammas
fit
data$b
data$deltas
data$gammas
fit
data$b
data$deltas
data$gammas
library(rstan)
fit %>% extract(pars = 'gamma')
library(tidyverse)
fit %>% extract(pars = 'gamma')
fit %>% rstan::extract(pars = 'gamma')
fit %>% rstan::extract(par = 'gamma')
fit %>% rstan::extract(par = 'gammas')
fit %>% rstan::extract(par = 'gammas') %>% colMeans()
fit %>% rstan::extract(par = 'gammas') %>% dim()
fit %>% rstan::extract(par = 'gammas') %>% class()
am = fit %>% extract()
am = fit %>% rstan::extract()
am$gammas %>% colMeans()
data$gammas
library(magrittr)
library(tidyverse)
library(qordstan)
library(rstan)
data = gen_data_example()
x = data$x
y = data$y
q = 0.5
beta_scale = 1
delta_scale = 0.25
mcmc_samples = 2000
warmup_samples = 1000
thin = 1
chains = 1
stan_data_list = list(
x = x,
y = y,
q = q,
k = length(unique(y)),
p = ncol(x), n = nrow(x),
beta_scale = beta_scale,
delta_scale = delta_scale
)
model = stan_model("inst/stan/model.stan", model_name = 'qord')
model_fit = rstan::sampling(
model, data = stan_data_list,
pars = c("beta", "gamma", "log_lik", "linear_pred"), iter = mcmc_samples,
warmup = warmup_samples, thin = thin, chains = chains
)
am = model_fit %>% rstan::extract()
am$log_lik %>% dim()
am$linear_pred %>% dim()
theta = (1-2*q)/(q*(1-q))
tau = sqrt(2/(q*(1-q)))
w = replicate(n = dim(am$beta)[2], expr = {rexp(n)})
rexp(n)
?rexp
w = replicate(n = dim(am$beta)[2], expr = {rexp(n=n)})
w = replicate(n = dim(am$beta)[2], expr = {rexp(n=dim(am$beta)[1])})
w %>% dim()
w = replicate(n = dim(am$linear_pred)[2], expr = {rexp(n=dim(am$linear_pred)[1])})
w %>% dim()
am$linear_pred %>% dim()
w = replicate(n = dim(am$linear_pred)[2], expr = {rnorm(n=dim(am$linear_pred)[1])})
w = replicate(n = dim(am$linear_pred)[2], expr = {rexp(n=dim(am$linear_pred)[1])})
u = replicate(n = dim(am$linear_pred)[2], expr = {rnorm(n=dim(am$linear_pred)[1])})
z = am$linear_pred + theta*w + tau*sqrt(w)*u
z
z[,1]
am$beta
am$beta %>% dim()
data$x %>% dim()
data$x%*%am$beta
data$x%*%t(am$beta)
pred_linear_c = data$x%*%t(am$beta)
am$linear_pred[1;10, 1:10]
am$linear_pred[1:10, 1:10]
am$linear_pred[1:10, 1:3]
pred_linear_c[1:10, 1:3]
data$x %>% dim()
am$beta[1,]
am$beta[1,]%*%data$x
data$x%*%am$beta[1,]
head(data$x%*%am$beta[1,])
am$linear_pred[1:10, 1:3]
pred_linear_c[1:10, 1:3]
head(data$x%*%am$beta[1,])
am$linear_pred[1:10, 1:3]
t(pred_linear_c)[1:10, 1:3]
?predict
lista = list(a = 1, b = 2)
lista$c
get_cut = function(z, gamma) {
cut_breaks = c(-Inf, 0, gamma, Inf)
z %>% cut(breaks = cut_breaks, labels = 1:(length(cut_breaks)-1))
}
i=1
get_cut(am$z[i,], am$gamma[i,])
get_cut(z[i,], am$gamma[i,])
get_cut = function(z, gamma) {
cut_breaks = c(-Inf, 0, gamma, Inf)
z %>%
cut(breaks = cut_breaks, labels = 1:(length(cut_breaks)-1)) %>%
as.numeric()
}
get_cut(z[i,], am$gamma[i,])
get_cut = function(z, gamma) {
cut_breaks = c(-Inf, 0, gamma, Inf)
z %>%
cut(breaks = cut_breaks, labels = 1:(length(cut_breaks)-1)) %>%
as.character() %>%
as.numeric()
}
i=1
get_cut(z[i,], am$gamma[i,])
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
source('~/qordstan/R/predict.qordstan.R', echo=TRUE)
devtools::document()
rm(list = c(".z_to_cat", "predict.qordstan"))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_github_actions()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?cut
?qordstan::qord_fit
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?cut
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
?cut
?cut.dendrogram
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
library(qordstan)
?qordstan::qord_fit
predict.qordstan
?predict.qordstan
?cut
?predict
?predict.lm
?predict.qordstan
?rstan::sampling
?cut.default
?cut.Date
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
?summary
base::summary
?base::summary
?stats::predict
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
library(magrittr)
library(tidyverse)
library(qordstan)
library(rstan)
data = gen_data_example()
fit = qord_fit(data$x, data$y, q = 0.5)
fit
summary(fit)
predict(fit)
devtools::document()
devtools::install()
library(magrittr)
library(tidyverse)
library(qordstan)
library(rstan)
devtools::document()
devtools::install()
?stan
?rstan::optimizing
library(magrittr)
library(tidyverse)
library(qordstan)
library(rstan)
data = gen_data_example()
fit = qord_fit(data$x, data$y, q = 0.5)
fit
summary(fit)
predict(fit)
pred = predict(fit)
?predict.qordstan
devtools::document()
devtools::check()
fit
data = gen_data_example()
fit = qord_fit(data$x, data$y, q = 0.5)
data = gen_data_example()
fit = qord_fit(data$x, data$y, q = 0.5)
library(qordstan)
data = gen_data_example()
fit = qord_fit(data$x, data$y, q = 0.5)
fit
summary(fit)
a = summary(fit)
devtools::document()
devtools::document()
devtools::check()
devtools::install()
devtools::install()
library(qordstan)
data = gen_data_example()
fit = qord_fit(data$x, data$y, q = 0.5)
fit
a = summary(fit)
a$summary_table
a
summary(fit)
?print.summary.qordstan
summary(fit)
class(summary(fit))
roxygen2::roxygenize()
devtools::check()
devtools::install()
library(magrittr)
library(tidyverse)
library(qordstan)
data = gen_data_example()
fit = qord_fit(data$x, data$y, q = 0.5)
devtools::install()
library(qordstan)
data = gen_data_example()
fit = qord_fit(data$x, data$y, q = 0.5)
fit
a = summary(fit)
a$summary_table
a
devtools::document()
?stan
?qordstan::
?qordstan::gen_data_example
use_testthat()
devtools::use_testthat()
usethis::use_testthat()
usethis::use_coverage(type = c("codecov"))
install.packages('covr')
install.packages('covr')
install.packages("covr")
library(covr)
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
library(covr)
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
library(qordstan)
devtools::install()
codecov(token = "cbaab2b6-52fb-43c4-bfcb-c5cfb849ae6a")
